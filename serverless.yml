service: serverless-example-lambda

frameworkVersion: '3'

provider:
  name: aws
  deploymentBucket:
    name: lambda-cicd-stack-s3bucketforpipelineartifacts5f0-16qc0kik0r39m
  runtime: nodejs14.x
  #default to 'dev' if unspecified
  stage: dev
  #profile: ${self:custom.profiles.${sls:stage}}
  # Default region (default: us-east-1)
  region: us-east-2
  # Optional CloudFormation tags to apply to APIs and functions
  iamRoleStatements:
    - Effect: Allow
      Action:
        - codedeploy:*
      Resource:
        - "*"
  tags:
    costcenter: tnc
    solution: helloworld
    environment: dev
  # Optional CloudFormation tags to apply to the stack
  stackTags:
    costcenter: tnc
  # Duration for CloudWatch log retention (default: forever)
  # Valid values: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-loggroup.html
  logRetentionInDays: 14
  # Use function versioning (enabled by default)
  versionFunctions: true
  # Processor architecture: 'x86_64' or 'arm64' via Graviton2 (default: x86_64)
  architecture: arm64
  # environment:
  #   # define the ARN of the function that you want to invoke
  #   FUNCTION_ARN: "arn:aws:lambda:${self:provider.region}:${aws:accountId}:function:${self:service}-${self:provider.stage}-lambdaTwo"  

  	
  tracing:
    # Can only be true if API Gateway is inside a stack.
    #apiGateway: true
    # Optional, can be true (true equals 'Active'), 'Active' or 'PassThrough'
    lambda: true

plugins:
  - serverless-plugin-aws-alerts
  - serverless-plugin-canary-deployments

custom:	
  alerts:
    dashboards: true
#   profiles:
#     test: testrole
#     dev: dev

functions:
  hello:
    #handler: handler.hello
    handler: src/handler.hello
    # Override the Lambda function name
    name: ${sls:stage}-serverlesslambda
    description: Serverless Framework deployed function	
    # https://www.serverless.com/framework/docs/providers/aws/guide/layers#using-your-layers
    layers:
      - arn:aws:lambda:${aws:region}:094274105915:layer:AWSLambdaPowertoolsTypeScript:6
    alarms:
      - name: foo
        namespace: 'AWS/Lambda'
        metric: Errors
        threshold: 1
        statistic: Minimum
        period: 60
        evaluationPeriods: 1
        comparisonOperator: GreaterThanOrEqualToThreshold
    deploymentSettings:
      type: Linear10PercentEvery1Minute
      alias: dev
      preTrafficHook: preHook
      postTrafficHook: postHook
      alarms:
        - HelloFooAlarm    	
  preHook:
    handler: hooks.pre
  postHook:
    handler: hooks.post
resources:
  Outputs:
    HelloLambdaFunctionArn:
      Description: 'ARN will be imported by other stacks'
      #Value: ${self:provider.environment.FUNCTION_ARN}
      Value: !GetAtt HelloLambdaFunction.Arn
      Export:
        Name: ${self:service}-${self:provider.stage}-HelloLambdaFunctionArn
  
